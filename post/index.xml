<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 赛蜗牛的博客</title>
    <link>https://blog.saiwoniu.com/post/</link>
    <description>Recent content in Posts on 赛蜗牛的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 22 Feb 2020 22:07:00 +0800</lastBuildDate>
    
	<atom:link href="https://blog.saiwoniu.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>docker笔记（2）</title>
      <link>https://blog.saiwoniu.com/post/docker%E7%AC%94%E8%AE%B02/</link>
      <pubDate>Sat, 22 Feb 2020 22:07:00 +0800</pubDate>
      
      <guid>https://blog.saiwoniu.com/post/docker%E7%AC%94%E8%AE%B02/</guid>
      <description>docker笔记（2） 常用命令和操作 1. 镜像操作 操作 命令 说明 检索 docker search 关键字 eg：docker search redis 我们经常去docker hub上检索镜像的详细信息，如镜像的TAG。 拉取 docker pull 镜像名:tag :tag是可选的，tag表示标签，多为软件的版本，默认是latest 列表 docker images 查看所有本地镜像 删除 docker</description>
    </item>
    
    <item>
      <title>docker笔记（1）</title>
      <link>https://blog.saiwoniu.com/post/docker%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Sat, 22 Feb 2020 21:49:00 +0800</pubDate>
      
      <guid>https://blog.saiwoniu.com/post/docker%E7%AC%94%E8%AE%B01/</guid>
      <description>docker笔记（1） 1. 简介 Docker是一个开源的应用容器引擎；是一个轻量级容器技术； Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像； 运行中的这个镜像称为容器，容器启动是非常快速的。 核心概念 docker主机(H</description>
    </item>
    
    <item>
      <title>MySQL基础（7） | 触发器</title>
      <link>https://blog.saiwoniu.com/post/MySQL%E5%9F%BA%E7%A1%807-%E8%A7%A6%E5%8F%91%E5%99%A8/</link>
      <pubDate>Sat, 22 Feb 2020 19:04:00 +0800</pubDate>
      
      <guid>https://blog.saiwoniu.com/post/MySQL%E5%9F%BA%E7%A1%807-%E8%A7%A6%E5%8F%91%E5%99%A8/</guid>
      <description>MySQL基础（7） | 触发器 基本语法 创建 1 2 3 4 5 6 7 CREATE TRIGGER trigger_name trigger_time trigger_event ON table_name FOR EACH ROW BEGIN ... END; 将触发器名称放在CREATE TRIGGER语句之后。触发器名称应遵循命名约定[trigger time]_[table name]_[trigger event]，例如before_employees_update。 触发激活时间可以在之前或之后。必须指定</description>
    </item>
    
    <item>
      <title>MySQL基础（3） | 函数</title>
      <link>https://blog.saiwoniu.com/post/MySQL%E5%9F%BA%E7%A1%803-%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 22 Feb 2020 18:56:00 +0800</pubDate>
      
      <guid>https://blog.saiwoniu.com/post/MySQL%E5%9F%BA%E7%A1%803-%E5%87%BD%E6%95%B0/</guid>
      <description>MySQL基础（3） | 函数 前言 MySQL只有标量值函数的概念，没有SqlServer那种表值函数。 语法 创建 1 2 3 4 5 6 7 8 9 create function f_add( a int, b int ) returns int return (select a + b); select f_add(1, 2); 修改 1 alter function f_add()... 删除 1 DROP FUNCTION [ IF EXISTS ] &amp;lt;自定义函数名&amp;gt; 参考：http://c.biancheng.net/view/</description>
    </item>
    
    <item>
      <title>MySQL基础（6） | check约束</title>
      <link>https://blog.saiwoniu.com/post/MySQL%E5%9F%BA%E7%A1%806-check%E7%BA%A6%E6%9D%9F/</link>
      <pubDate>Sat, 22 Feb 2020 18:26:00 +0800</pubDate>
      
      <guid>https://blog.saiwoniu.com/post/MySQL%E5%9F%BA%E7%A1%806-check%E7%BA%A6%E6%9D%9F/</guid>
      <description>MySQL基础（6） | check约束 前言 在一些情况下，我们需要字段在指定范围的输入， 例如：性别只能输入 &amp;lsquo;男&#39;或者&#39;女&amp;rsquo;，余额只能大于0等条件， 我们除了在程序上控制以外，我们还能使用 CHECK 约束 来规范数据。 》》》然而： mysql所有的存储引擎均不支持check约束</description>
    </item>
    
    <item>
      <title>MySQL基础（2） | 数据库、数据表</title>
      <link>https://blog.saiwoniu.com/post/MySQL%E5%9F%BA%E7%A1%802-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%B0%E6%8D%AE%E8%A1%A8/</link>
      <pubDate>Sat, 22 Feb 2020 16:54:00 +0800</pubDate>
      
      <guid>https://blog.saiwoniu.com/post/MySQL%E5%9F%BA%E7%A1%802-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%B0%E6%8D%AE%E8%A1%A8/</guid>
      <description>MySQL基础（2） | 数据库、数据表 基本语法 数据库 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #创建 CREATE DATABASE IF NOT EXISTS test_db_char DEFAULT CHARACTER SET utf8; #显示创建详情 SHOW CREATE DATABASE test_db_char; #修改 ALTER DATABASE test_db_char DEFAULT CHARACTER SET gbk; #删除 DROP DATABASE IF EXISTS test_db_char; #选择数据库 USE test_db; 数据表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #创建 create table mygoods( g_id int AUTO_INCREMENT primary key, #创建表时指定主键 g_name varchar(20), g_price double, g_count int )engine=innodb default</description>
    </item>
    
    <item>
      <title>MySQL基础（4） | 视图</title>
      <link>https://blog.saiwoniu.com/post/MySQL%E5%9F%BA%E7%A1%804-%E8%A7%86%E5%9B%BE/</link>
      <pubDate>Sat, 22 Feb 2020 15:47:00 +0800</pubDate>
      
      <guid>https://blog.saiwoniu.com/post/MySQL%E5%9F%BA%E7%A1%804-%E8%A7%86%E5%9B%BE/</guid>
      <description>MySQL基础（4） | 视图 基本语法 1.创建 1 CREATE VIEW &amp;lt;视图名&amp;gt; AS &amp;lt;SELECT语句&amp;gt; 语法说明如下。 &amp;lt;视图名&amp;gt;：指定视图的名称。该名称在数据库中必须是唯一的，不能与其他表或视图同名。 &amp;lt;SELECT语句&amp;gt;：指定创建视图的 SELECT 语句，可用于查询多</description>
    </item>
    
    <item>
      <title>字节、字符、位、bit、byte之间的关系</title>
      <link>https://blog.saiwoniu.com/post/%E5%AD%97%E8%8A%82%E5%AD%97%E7%AC%A6%E4%BD%8Dbitbyte%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Sat, 22 Feb 2020 11:37:00 +0800</pubDate>
      
      <guid>https://blog.saiwoniu.com/post/%E5%AD%97%E8%8A%82%E5%AD%97%E7%AC%A6%E4%BD%8Dbitbyte%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</guid>
      <description>字节、字符、位、bit、byte之间的关系 1. 概要 位（bit）：是计算机 内部数据 储存的最小单位，表示二进制位，11001100是一个八位二进制数。 电脑记忆体中最小的单位，在二进位电脑系统中，每一bit 可以代表0 或 1 的数位讯号。 字节（byte）：是计算机中 数据处理 的基本单位，习惯上用</description>
    </item>
    
    <item>
      <title>MySQL基础（5） | 存储过程</title>
      <link>https://blog.saiwoniu.com/post/MySQL%E5%9F%BA%E7%A1%805-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Sat, 22 Feb 2020 10:54:00 +0800</pubDate>
      
      <guid>https://blog.saiwoniu.com/post/MySQL%E5%9F%BA%E7%A1%805-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</guid>
      <description>MySQL基础（5） | 存储过程 一、基础 结束符【重要】 mysql的命令行执行每一条命令是以分号结尾的，也就是说识别是否为一条命令，是根据分号决定的。 然而存储过程中设计多条语句，很可能出现多个分号，所以直接把存储过程复制到命令执行一般都会失败。 解决方法是临时切换分隔符，让命令行知道整</description>
    </item>
    
    <item>
      <title>MySQL基础（1） | 数据类型</title>
      <link>https://blog.saiwoniu.com/post/MySQL%E5%9F%BA%E7%A1%801-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Fri, 21 Feb 2020 22:00:00 +0800</pubDate>
      
      <guid>https://blog.saiwoniu.com/post/MySQL%E5%9F%BA%E7%A1%801-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>MySQL基础（1） | 数据类型 数值类型 1 2 3 4 5 6 7 8 9 TINYINT #小整数值，1 字节，有符号(-128，127)，无符号(0，255) SMALLINT #大整数值，2 字节 MEDIUMINT #大整数值，3 字节 INT或INTEGER #大整数值，4 字节，有符号(-2147483648，2147483647)，无符号(0，42</description>
    </item>
    
  </channel>
</rss>